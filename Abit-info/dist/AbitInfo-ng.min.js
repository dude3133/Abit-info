(function () {
    'use strict';
    angular
        .module('abitApp',
        ['angularUtils.directives.dirPagination',
            'ngMaterial',
            'ui.router',
            'ngMessages',
            'ngAnimate',
            'LocalStorageModule',
            'formly',
            'formlyBootstrap',
            'ngAria',
            'ui.bootstrap',
            'luegg.directives',
            'chart.js',
            'toastr',
            'ngProgressLite'
        ]);
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('universityService', universityService);

    universityService.$inject = ['$http'];

    function universityService($http) {
        return {
            getFaculties: getFaculties,
            getUnivesity: getUnivesity
        };

        function getFaculties(id,page) {
            return $http.get('/api/Faculty/get/?id=' + id + '&offset=' + page.offset + '&count=' + page.count)
                .then(function (httpData) {
                    return httpData.data;
                });
        }
        function getUnivesity(id) {
            return $http.get('/api/University/get/'+id)
                .then(function (httpData) {
                    return httpData.data;
                });
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('universityController', universityController);

    universityController.$inject = ['universityInfo', 'universityService'];

    function universityController(universityInfo, universityService) {
        var vm = this;
        vm.university = universityInfo;
        vm.Message = " ";
    };
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('universitiesListService', universitiesListService);

    universitiesListService.$inject = ['$http'];

    function universitiesListService($http) {
        return {
            getUniversities: getUniversities,
            getUniversitiesCount: getUniversitiesCount
        };

        function getUniversities(page) {
            return $http.get('/api/University/get/?offset=' + page.offset + '&count=' + page.count)
                .then(function (httpData) {
                    return httpData.data;
                });
        }
        function getUniversitiesCount() {
            return $http.get('/api/University/getCount/')
                .then(function (httpData) {
                    return httpData.data;
                });
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('universitiesListController', universitiesListController);

    universitiesListController.$inject = ['universitiesCount', 'universitiesListService'];

    function universitiesListController(universitiesCount, universitiesListService) {
        var vm = this;
        vm.universities = [];
        vm.Message = " ";
        vm.universityCount = universitiesCount;
        vm.universityCurrentPage = 1;
        vm.universitiesPerPage = 20;
        vm.fetchUniversities = fetchUniversities;

        function fetchUniversities(currentPage) {
            var page = {
                offset: vm.universitiesPerPage * (currentPage - 1),
                count: vm.universitiesPerPage
            }
            universitiesListService.getUniversities(page).then(function (data) {
                vm.universities = data;
            });
        }

        init();

        function init() {
            var page = {
                offset: vm.universitiesPerPage * (vm.universityCurrentPage - 1),
                count: vm.universitiesPerPage
            }
            universitiesListService.getUniversities(page).then(function (data) {
                vm.universities = data;
            });
        }
    };
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('specialitySearchService', specialitySearchService);

    specialitySearchService.$inject = ['$http'];

    function specialitySearchService($http) {
        return {
            getSpecialities: getSpecialities
        };

        function getSpecialities(q,count) {
            return $http.get('/api/Speciality/get/?q='+q+ '&count=' + count)
                .then(function (httpData) {
                    return httpData.data;
                });
        }

    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('specialitySearchController', specialitySearchController);

    specialitySearchController.$inject = ['specialitySearchService'];

    function specialitySearchController(specialitySearchService) {
        var vm = this;
        vm.query = "";
        vm.specialities = [];
        vm.Message = " ";
        vm.find = find;

        function find() {
            specialitySearchService.getSpecialities(vm.query, 20).then(function (data) {
                       vm.specialities = data;
            });
        }
    };
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('specialityService', specialityService);

    specialityService.$inject = ['$http', 'authService'];

    function specialityService($http, authService) {
        return {
            getApplicants: getApplicants,
            getSpeciality: getSpeciality,
            apply: apply
        };

        function getApplicants(id) {
            return $http.get('/api/Speciality/get/?id=' + id)
                .then(function (httpData) {
                    return httpData.data;
                });
        }
        
        function getSpeciality(id) {
            return $http.get('/api/Speciality/get/?id=' + id)
                .then(function (httpData) {
                    return httpData.data;
                });
        }

        function apply(id) {
            var model = {
                UserName: authService.authentication.userName,
                UserId:"",
                Id:id
            }
            return $http.post('/api/Speciality/post/',model)
                .then(function (httpData) {
                    return httpData.data;
                });
        } 
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('specialityController', specialityController);

    specialityController.$inject = ['specialityInfo', 'specialityService', '$stateParams'];

    function specialityController(specialityInfo, specialityService, $stateParams) {
        var vm = this;
        vm.speciality = specialityInfo;
        vm.Message = " ";
        vm.getAccepted = getAccepted;
        vm.getRecomended = getRecomended;
        vm.getApplicants = getApplicants;
        vm.apply = apply;


        function apply() {
            specialityService.apply($stateParams.id);
        }
        function getAccepted(to) {
            return vm.speciality.Applicants.slice(0, to);
        }
        function getRecomended(from,to) {
            return vm.speciality.Applicants.slice(from, to);
        }
        function getApplicants(from) {
            return vm.speciality.Applicants.slice(from, vm.speciality.Applicants.length);
        }
    };
})();
(function () {
    angular
        .module('abitApp')
        .config(routesConfig);

    routesConfig.$inject = ['$stateProvider', '$urlRouterProvider'];

    function routesConfig($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('mainPage', {
                templateUrl: '../Client/App/Main/main.html',
                controller: 'mainPageController as main',
                url: '/'
            })
            .state('users', {
                controller: "userController as users",
                templateUrl: "../Client/App/Applicant/applicants.html",
                url: '/users'
            })
            .state('universities', {
                controller: 'universitiesListController as univlist',
                templateUrl: '../Client/App/University/list/universitiesList.html',
                url: '/universities',
                resolve: {
                    universitiesCount: universitiesCountResolve
                }
            })
             .state('university', {
                 controller: 'universityController as university',
                 templateUrl: '../Client/App/University/page/university.html',
                 url: '/university/:id',
                 resolve: {
                     universityInfo: universityInfoResolve,
                     facultiesCount: facultiesCountResolve
                 }
             })
            .state('faculty', {
                controller: 'facultyController as faculty',
                templateUrl: '../Client/App/Faculty/faculty.html',
                url: '/faculty/:id',
                resolve: {
                    facultyInfo: facultyInfoResolve
                }
            })
            .state('speciality', {
                controller: 'specialityController as speciality',
                templateUrl: '../Client/App/Speciality/speciality.html',
                url: '/speciality/:id',
                resolve: {
                    specialityInfo: specialityInfoResolve
                }
            })
            .state('admin', {
                controller: 'adminController as admin',
                templateUrl: '../Client/App/admin/admin.panel.html',
                url: '/admin',
                data: {
                    roles: ['Admin']
                }
            })
            .state('specSeach', {
                controller: 'specialitySearchController as specSearch',
                templateUrl: '../Client/App/Speciality/Search/specialitySearch.html',
                url: '/search'
            })
            .state('associate', {
                controller: 'associateController as associate',
                templateUrl: '../Client/App/auth/associate.html',
                url: '/associate'
            })
            .state('streamBoard', {
                controller: 'adminController as admin',
                templateUrl: '../Client/App/admin/admin.panel.html',
                url: '/admin',
                data: {
                    roles: ['User']
                }
            });


        $urlRouterProvider.otherwise('/');

        universitiesCountResolve.$inject = ['universitiesListService'];
        function universitiesCountResolve(universitiesListService) {
            return universitiesListService.getUniversitiesCount();
        }



        universityInfoResolve.$inject = ['$stateParams', 'universityService'];
        function universityInfoResolve($stateParams, universityService) {
            return universityService.getUnivesity($stateParams.id);
        }

        facultiesCountResolve.$inject = ['$stateParams', 'universityService'];
        function facultiesCountResolve($stateParams, universityService) {
            var page = {
                offset: 0,
                count: 20
            }
            return universityService.getFaculties($stateParams.id, page);
        }

        facultyInfoResolve.$inject = ['$stateParams', 'facultyService'];
        function facultyInfoResolve($stateParams, facultyService) {
            return facultyService.getFaculty($stateParams.id);
        }

        specialityInfoResolve.$inject = ['$stateParams', 'specialityService'];
        function specialityInfoResolve($stateParams, specialityService) {
            return specialityService.getSpeciality($stateParams.id);
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('indexController', indexController);

    indexController.$inject = ['$location',
                               'authService',
                                'authModal'];

    function indexController($location,
                             authService,
                             authModal) {
        var vm = this;
        vm.quantity = 0;
        vm.logOut = logOut;
        vm.authentication = authService.authentication;
        vm.LogIn = openLoginModal;
        vm.SignUp = openSignupModal;

       

        function openLoginModal() {
            authModal.openModal("login");
        }

        function openSignupModal() {
            authModal.openModal('signup');
        }

        function logOut() {
            authService.logOut();
            $location.path('/');
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .run(runApplication);

    runApplication.$inject = ['$rootScope',
                             'authService',
                             'authStateCheck',
                             'formlyConfig',
                             'formlyValidationMessages',
                             'authStateCheck'];

    function runApplication($rootScope,
                            authService,
                            formlyConfig,
                            formlyValidationMessages,
                            authStateCheck) {
        authService.fillAuthData();
        //putStateChecks();

        //function putStateChecks() {
        //    $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams) {
        //        authStateCheck.checkAccess(event, toState, toStateParams);
        //    });
        //}
    }
})();



(function() {
    'use strict';

    angular
        .module('abitApp')
        .controller('mainPageController', mainPageController);

    mainPageController.$inject = ['$scope'];

    function mainPageController($scope) {
        var vm = this;
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('signupController', signupController);

    signupController.$inject = ['$scope', '$timeout', 'authService'];

    function signupController($scope, $timeout, authService) {
        /* jshint validthis: true*/
        var vm = this;

        vm.savedSuccessfully = false;
        vm.message = "";
        vm.signUp = signUp;
        vm.startTimer = startTimer;
        vm.disabled = false;

        vm.registrationData = {
            username: "",
            password: "",
            confirmPassword: "",
            email: ""
        };

        function signUp() {
            if (!validate() || vm.disabled) {
                return;
            }
            vm.disabled = true;
            authService.saveRegistration(vm.registrationData).then(function (response) {
                vm.disabled = false;
                vm.savedSuccessfully = true;
                vm.message = "User has been registered successfully and confirmation email has been sent, " +
                "you will be redicted to login page in 2 seconds.";
                startTimer();

            },
             function (response) {
                 vm.disabled = false;
                 var errors = [];
                 for (var key in response.data.ModelState) {
                     for (var i = 0; i < response.data.ModelState[key].length; i++) {
                         errors.push(response.data.ModelState[key][i]);
                     }
                 }
                 vm.message = "Failed to register user due to:" + errors.join(' ');
             });
        }

        function startTimer() {
            var timer = $timeout(function () {
                $timeout.cancel(timer);
                $scope.auth.currTab = 1;
            }, 2000);
        }

        function validate() {
            if (vm.registrationData.password != vm.registrationData.confirmPassword) {
                vm.message = "Confirm password and password does not match";
                return false;
            }
            return true;
        }
    }
})();
(function () {

    'use strict';
    angular
        .module('abitApp')
        .controller('loginController', loginController);

    loginController.$inject = ['$scope', '$location', 'authService'];

    function loginController($scope, $location, authService) {
        /* jshint validthis: true */
        var vm = this;

        vm.loginData = { userName: "", password: ""};
        vm.login = login;
        vm.authExternalProvider = authExternalProvider;
        vm.authCompletedCB = authCompletedCB;
        vm.message = "";
        vm.disabled = false;

        function login() {
            if (vm.disabled) {
                return;
            }
            vm.disabled = true;
            authService.login(vm.loginData).then(function (response) {
                $scope.auth.close();

            },
             function (err) {
                 vm.message = err.error_description;
             });
        }

        
        function authExternalProvider(provider) {
            var externalProviderUrl = "api/Facebook/ExternalLogin?provider=" + provider;
            // + "&response_type=token&client_id=" + ngAuthSettings.clientId
            // + "&redirect_uri=" + redirectUri;
            window.$windowScope = vm;

            var oauthWindow = window.open(externalProviderUrl, "Authenticate Account", "location=0,status=0,width=600,height=750");
        }

        function authCompletedCB(fragment) {
            $scope.$apply(function() {

                if (fragment.haslocalaccount === 'False') {

                    authService.logOut();

                    authService.externalAuthData = {
                        provider: fragment.provider,
                        userName: fragment.external_user_name,
                        externalAccessToken: fragment.external_access_token
                    };

                    $location.path('/associate');

                    $scope.auth.close();
                } else {
                    //Obtain access token and redirect to orders
                    var externalData = {
                        provider: fragment.provider,
                        externalAccessToken: fragment.external_access_token
                    };
                    authService.obtainAccessToken(externalData).then(function(response) {
                            //$location.path('/');
                            $scope.auth.close();
                        },
                        function(err) {
                            $scope.message = err.error_description;
                        });
                }
            });
        }
    };
})();
(function() {
    'use strict';

    angular
        .module('abitApp')
        .directive('equals', equals);

    equals.$inject = [];
    
    function equals () {
        var directive = {
            require: 'ngModel',
            link: link,
            restrict: 'A',
            scope: {
                check: '='
            }
        };
        return directive;

        function link(scope, element, attrs, ctrl) {
            ctrl.$validators.equals = function(modelValue, viewValue) {
                return modelValue === scope.check;
            }
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('authStateCheck', authStateCheck);

    authStateCheck.$inject = ['$state', 'authService', 'authModal', 'toastr'];

    function authStateCheck($state, authService, authModal, toastr) {
        var service = {
            checkAccess: checkAccess
        };

        return service;

        function checkAccess(event, toState, toStateParams) {
            if (!toState.data) {
                return;
            }
            var roles = toState.data.roles;
            if (roles && roles.length > 0 && !authService.authentication.isInRoles(roles)) {
                event.preventDefault();
                if (!authService.authentication.isAuth) {
                    authModal.openModal().result.then(function () {
                        $state.go(toState.name, toStateParams);
                    });
                }
                else {
                    toastr.error('Access denied');
                }
            }
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('authModal', authModal);

    authModal.$inject = ['$modal'];

    function authModal($modal) {
        var service = {
            openModal: openModal,
            isModalOpen: isModalOpen
        };
        var modalConfig = {
            templateUrl: 'client/app/auth/auth.html',
            controller: 'authController as auth',
            animation: true,
            size: 'md'
        };
        var signupIndex = 2;
        var loginIndex = 1;
        var isOpen = false;

        return service;

        function openModal(tab) {
            if (isOpen) {
                return null;
            }

            isOpen = true;
            if (tab === "signup") {
                modalConfig.resolve = { currTab: signupResolve};
            }
            else {
                modalConfig.resolve = { currTab: loginResolve};
            }
            
            var modalInstance = $modal.open(modalConfig);
            modalInstance.result.finally(function() {
                isOpen = false;
            });
            return modalInstance;
        }
        
        function signupResolve() {
            return signupIndex;
        }

        function loginResolve() {
            return loginIndex;
        }

        function isModalOpen() {
            return isOpen;
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .factory('authService', authService);

    authService.$inject = ['$http', '$q', 'localStorageService'];

    function authService($http, $q, localStorageService) {

        var authentication = {
            isAuth: false,
            userName: "",
            roles: [],
            Id : "",
            isInRoles: isInRoles
        };
        var externalAuthData = {
            provider: "",
            userName: "",
            externalAccessToken: ""
        };
        var authServiceFactory = {
            saveRegistration: saveRegistration,
            login: login,
            logOut: logOut,
            fillAuthData: fillAuthData,
            authentication: authentication,
            externalAuthData: externalAuthData,
            obtainAccessToken: obtainAccessToken,
            registerExternal: registerExternal
        };
        return authServiceFactory;

        function registerExternal(registerExternalData) {
            var deferred = $q.defer();

            $http.post('api/facebook/register', registerExternalData)
                .success(function (response) {
                    var roles = $.parseJSON(response.roles);
                    localStorageService.set('authorizationData', {
                        token: response.access_token,
                        userName: response.userName,
                        roles: roles,
                        refreshToken: "",
                        useRefreshTokens: false
                    });

                    authentication.isAuth = true;
                    authentication.userName = response.userName;
                    authentication.useRefreshTokens = false;
                    authentication.roles = roles;

                    deferred.resolve(response);

                }).error(function (err, status) {
                    _logOut();
                    deferred.reject(err);
                });

            return deferred.promise;
        }

        function obtainAccessToken(externalData) {
            var deferred = $q.defer();

            $http.get('api/Facebook/ObtainLocalAccessToken', {
                params: {
                    provider: externalData.provider,
                    externalAccessToken: externalData.externalAccessToken
                }
            }).success(function (response) {
                var roles = $.parseJSON(response.roles);
                localStorageService.set('authorizationData', {
                    token: response.access_token,
                    userName: response.userName,
                    roles: roles,
                    refreshToken: "",
                    useRefreshTokens: false
                });

                authentication.isAuth = true;
                authentication.userName = response.userName;
                authentication.useRefreshTokens = false;
                authentication.roles = roles;

                deferred.resolve(response);

            }).error(function (err, status) {
                _logOut();
                deferred.reject(err);
            });

            return deferred.promise;
        }

        function saveRegistration(registration) {
            logOut();
            return $http.post('api/account/register', registration).then(function (response) {
                return response;
            });

        }

        function login(loginData) {

            var data = "grant_type=password&username=" + loginData.userName + "&password=" + loginData.password;

            var deferred = $q.defer();

            $http.post('token', data, {
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            })
                .success(function (response) {
                    var roles = $.parseJSON(response.roles);
                    localStorageService.set('authorizationData', {
                        token: response.access_token,
                        userName: loginData.userName,
                        roles: roles
                    });
                    authentication.isAuth = true;
                    authentication.userName = loginData.userName;
                    authentication.roles = roles;
                    deferred.resolve(response);

                }).error(function (err) {
                    logOut();
                    deferred.reject(err);
                });

            return deferred.promise;
        }

        function logOut() {
            localStorageService.remove('authorizationData');
            authentication.isAuth = false;
            authentication.userName = "";
            authentication.roles = [];
        }

        function fillAuthData() {
            var authData = localStorageService.get('authorizationData');
            if (authData) {
                authentication.isAuth = true;
                authentication.userName = authData.userName;
                authentication.roles = authData.roles;
                authentication.Id = authData.Id;
            }
        }

        function isInRoles(roles) {
            return _.any(roles, function (item) {
                return _.include(authentication.roles, item);
            });
        }
    }
})();
(function () {
	'use strict';
	angular
        .module('abitApp')
        .factory('authInterceptorService', authInterceptorService);

	authInterceptorService.$inject = ['$q', '$location', 'localStorageService', '$injector'];

	function authInterceptorService($q, $location, localStorageService, $injector) {

	    var authModal;
		var authInterceptorServiceFactory = {
			request: request,
			responseError: responseError
		};
		return authInterceptorServiceFactory;


		function request(config) {

			config.headers = config.headers || {};

			var authData = localStorageService.get('authorizationData');
			if (authData) {
				config.headers.Authorization = 'Bearer ' + authData.token;
			}
			return config;
		}

		function responseError(rejection) {
		    authModal = authModal || $injector.get("authModal");
		    if (rejection.status === 401) {
			    authModal.openModal();
			}
			return $q.reject(rejection);
		}
	}
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .controller('authController', authController);

    authController.$inject = ['$modalInstance', 'currTab'];

    function authController($modalInstance, currTab) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = 'authController';
        vm.currTab = currTab;
        vm.close = close;

        function close() {
            $modalInstance.close("cancel");
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('abitApp')
        .controller('associateController', associateController);

    associateController.$inject = ['$location', '$timeout', 'authService'];

    function associateController($location, $timeout, authService) {
        /* jshint validthis: true*/
        var vm = this;
        vm.savedSuccessfully = false;
        vm.message = '';
        vm.registerData = {
            userName: authService.externalAuthData.userName,
            provider: authService.externalAuthData.provider,
            externalAccessToken: authService.externalAuthData.externalAccessToken
        };
        vm.registerExternal = registerExternal; 
        
        function registerExternal() {
            authService.registerExternal(vm.registerData)
                .then(function(response) {
                        vm.savedSuccessfully = true;
                        vm.message = "User has been registered successfully, you will be redicted to main page in 2 seconds.";
                        startTimer();
                    },
                    function(response) {
                        var errors = [];
                        for (var key in response.modelState) {
                            errors.push(response.modelState[key]);
                        }
                        $scope.message = "Failed to register user due to:" + errors.join(' ');
                    });
        };

        function startTimer() {
            var timer = $timeout(function () {
                $timeout.cancel(timer);
                $location.path('/');
            }, 2000);
        }
    };
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('facultyService', facultyService);

    facultyService.$inject = ['$http'];

    function facultyService($http) {
        return {
            getSpecialities: getSpecialities,
            getFaculty: getFaculty
        };

        function getSpecialities(id,page) {
            return $http.get('/api/Specialities/get/?id=' + id + '&offset=' + page.offset + '&count=' + page.count)
                .then(function (httpData) {
                    return httpData.data;
                });
        }
        function getFaculty(id) {
            return $http.get('/api/Faculty/get/'+id)
                .then(function (httpData) {
                    return httpData.data;
                });
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('facultyController', facultyController);

    facultyController.$inject = ['facultyInfo',  'facultyService'];

    function facultyController(facultyInfo,  facultyService) {
        var vm = this;
        vm.faculty = facultyInfo;
        vm.specialities = [];
        vm.Message = " ";
        vm.specialitiesCount = 20;
        vm.specialitiesCurrentPage = 1;
        vm.specialitiesPerPage = 20;
        vm.fetchspecialities = fetchspecialities;

        function fetchspecialities(currentPage) {
        //    var page = {
        //        offset: vm.specialitiesPerPage * (currentPage - 1),
        //        count: vm.specialitiesPerPage
        //    }
        //    facultyService.getspecialities(vm.faculty.Id,page).then(function (data) {
        //        vm.specialities = data;
        //    });
        }

        //init();

        //function init() {
        //    vm.specialitiesCount
        //    var page = {
        //        offset: vm.specialitiesPerPage * (vm.specialitiesCurrentPage - 1),
        //        count: vm.specialitiesPerPage
        //    }
        //    facultyService.getspecialities(vm.faculty.Id, page).then(function (data) {
        //        vm.specialities = data;
        //    });
        //}
    };
})();
(function () {
    'use strict';

    angular
        .module('abitApp')
        .factory('userService', userService);

    userService.$inject = ['$http'];

    function userService($http) {
        return {
            getUsers: getUsers
        };
        function getUsers() {
            return $http.get('/api/User/getall/')
                .then(function (httpData) {
                    return httpData.data;
                });
        }
    }
})();
(function () {
    'use strict';
    angular
        .module('abitApp')
        .controller('userController', userController);

    userController.$inject = ['userService'];

    function userController(userService) {
        var vm = this;
        vm.listOfUsers = [];
        vm.Message = " ";

        activate();

        function activate() {
            userService.getUsers().then(function(data) {
                vm.listOfUsers = data;
            });
        }
    };
})();